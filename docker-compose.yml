version: '3.1'

services:
  zookeeper:
      image: confluentinc/cp-zookeeper:7.4.0
      hostname: zookeeper
      container_name: zookeeper
      ports:
        - "2181:2181"
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.4.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    image: cnfldemos/cp-server-connect-datagen:0.5.3-7.1.0
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.4.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
      - ksqldb-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.4.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.4.0
    container_name: ksqldb-cli
    depends_on:
      - broker
      - connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  ksql-datagen:
    image: confluentinc/ksqldb-examples:7.4.0
    hostname: ksql-datagen
    container_name: ksql-datagen
    depends_on:
      - ksqldb-server
      - broker
      - schema-registry
      - connect
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b broker:29092 1 40 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready schema-registry 8081 40 && \
                       echo Waiting a few seconds for topic creation to finish... && \
                       sleep 11 && \
                       tail -f /dev/null'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      STREAMS_BOOTSTRAP_SERVERS: broker:29092
      STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
      STREAMS_SCHEMA_REGISTRY_PORT: 8081

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.4.0
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  elasticsearch:
    container_name: els
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    ports:
      - 9200:9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    networks:
      - dev

  # with kibana to many lags :(
  # kibana:
  #   container_name: kibana
  #   image: docker.elastic.co/kibana/kibana:8.8.0
  #   ports:
  #     - 5601:5601
  #   depends_on:
  #     - elasticsearch
  #   environment:
  #     - ELASTICSEARCH_URL=http://localhost:9200
  #   networks:
  #     - dev

  versity-products-db:
    image: debezium/postgres:13-alpine
    environment:
      - POSTGRES_DATABASE=versity_products_dev
      - POSTGRES_USER=versity_dev
      - POSTGRES_PASSWORD=versity_dev
    ports:
      - 5432
    volumes:
      - postgres-data:/data/db
    networks:
      - dev
  
  versity-products-service:
    image: jejikeh/versity.products:latest
    container_name: versity-products-service
    depends_on:
      - versity-products-db
    ports:
      - 80
      - 443
    build:
      context: .
      dockerfile: src/Versity.Products/Dockerfile
    environment:
      - ConnectionString=Host=versity-products-db;Port=5432;Username=versity_dev;Password=versity_dev;Database=versity_products_dev;
      - ASPNETCORE_ENVIRONMENT=DEVELOPMENT
      - ASPNETCORE_URLS=https://+;http://+
      - ASPNETCORE_Kestrel__Certificates__Default__Password=localhost
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/root/.aspnet/https/localhost.pfx
      - JWT__Key=06AA645D-B70D-446F-90D7-192A5C1CAA6A
      - JWT__Issuer=https://versity.users:4001
      - JWT__Audience=https://versity.users:4001
      - KAFKA_Host=localhost:9092
      - KAFKA_Topic=versity.products
      - KAFKA_ProducerName=versity.products.dev
    volumes:
      - ~/.aspnet/https:/root/.aspnet/https:ro
      - ~/AppData/Roaming/Microsoft/UserSecrets/:/root/.microsoft/usersecrets:ro
    networks:
      dev:
        aliases:
          - products.versity.dev

  versity-users-db:
    image: debezium/postgres:13-alpine
    environment:
      - POSTGRES_DATABASE=versity_users_dev
      - POSTGRES_USER=versity_dev
      - POSTGRES_PASSWORD=versity_dev
    ports:
      - 5432
    volumes:
      - postgres-data:/data/db
    networks:
      - dev

  versity-users-service:
    image: jejikeh/versity.users:latest
    container_name: versity-users-service
    depends_on:
      - versity-users-db
    ports:
      - 443
      - 777
    build:
      context: .
      dockerfile: src/Versity.Users/Dockerfile
    environment:
      - ConnectionString=Host=versity-users-db;Port=5432;Username=versity_dev;Password=versity_dev;Database=versity_users_dev;
      - Mailgun__Private__ApiKey=43304ec0eca931e64b1adee47aaab749-135a8d32-174884e4
      - ASPNETCORE_ENVIRONMENT=DEVELOPMENT
      - ASPNETCORE_URLS=https://+443;http://+80
      - JWT__Key=06AA645D-B70D-446F-90D7-192A5C1CAA6A
      - ASPNETCORE_Kestrel__Certificates__Default__Password=localhost
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/root/.aspnet/https/localhost.pfx
      - JWT__Issuer=https://versity.users:4001
      - JWT__Audience=https://versity.users:4001
      - EMAIL__From=versity.identity.dev@gmail.com
      - EMAIL__SmtpServer=smtp.gmail.com
      - EMAIL__Port=465
      - EMAIL__Username=versity.identity.dev@gmail.com
      - EMAIL__Password=ebqatxmtxaurcdfu
      - EMAIL__ConfirmUrl=https://localhost:8001/api/auth/confirmemail/
      - ADMIN__Password=vers1ty.Admin
      - ADMIN__Email=versity.identity.dev@gmail.com
    volumes:
      - ~/.aspnet/https:/root/.aspnet/https:ro
      - ~/AppData/Roaming/Microsoft/UserSecrets/:/root/.microsoft/usersecrets:ro
    networks:
      dev:
        aliases:
          - users.versity.dev
  
  versity-apigateway-service:
    image: jejikeh/versity.apigateway:latest
    container_name: versity-apigateway-service
    depends_on:
      - versity-users-service
    ports:
      - 3001:443
    build:
      context: .
      dockerfile: src/Versity.ApiGateway/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=DEVELOPMENT
      - ASPNETCORE_URLS=https://+443;http://+80
      - ASPNETCORE_HTTPS_PORT=8001
      - JWT__Key=06AA645D-B70D-446F-90D7-192A5C1CAA6A
      - ASPNETCORE_Kestrel__Certificates__Default__Password=localhost
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/root/.aspnet/https/localhost.pfx
      - JWT__Issuer=https://versity.users:4001
      - JWT__Audience=https://versity.users:4001
    volumes:
      - ~/.aspnet/https:/root/.aspnet/https:ro
      - ~/AppData/Roaming/Microsoft/UserSecrets/:/root/.microsoft/usersecrets:ro
    networks:
      - dev
    
  versity-sessions-db:
    image: debezium/postgres:13-alpine
    environment:
      - POSTGRES_DATABASE=versity_session_dev
      - POSTGRES_USER=versity_dev
      - POSTGRES_PASSWORD=versity_dev
    ports:
      - 5432
    volumes:
      - postgres-data:/data/db
    networks:
      - dev
  
  versity-sessions-service:
    image: jejikeh/versity.sessions:latest
    container_name: versity-sessions-service
    depends_on:
      - versity-sessions-db
    ports:
      - 80
      - 443
    build:
      context: .
      dockerfile: src/Versity.Sessions/Dockerfile
    environment:
      - ConnectionString=Host=versity-sessions-db;Port=5432;Username=versity_dev;Password=versity_dev;Database=versity_sessions_dev;
      - ASPNETCORE_ENVIRONMENT=DEVELOPMENT
      - ASPNETCORE_URLS=https://+;http://+
      - ASPNETCORE_Kestrel__Certificates__Default__Password=localhost
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/root/.aspnet/https/localhost.pfx
      - JWT__Key=06AA645D-B70D-446F-90D7-192A5C1CAA6A
      - JWT__Issuer=https://versity.users:4001
      - JWT__Audience=https://versity.users:4001
      - KAFKA_Host=localhost:9092
      - KAFKA_Topic=versity.products
    volumes:
      - ~/.aspnet/https:/root/.aspnet/https:ro
      - ~/AppData/Roaming/Microsoft/UserSecrets/:/root/.microsoft/usersecrets:ro
    networks:
      dev:
        aliases:
          - sessions.versity.dev

networks:
  dev:
    driver: bridge

volumes:
  elasticsearch-data:
  postgres-data: